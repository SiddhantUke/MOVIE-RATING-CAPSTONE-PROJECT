# -*- coding: utf-8 -*-
"""MOVING RATING CAPSTONE PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rg6KCxwUPPf8XlXPrCkWcQBW-uYEmOdA

#**CAPSTONE PROJECT**

#**Overview**

If we are planning on going out to see a movie, how well can we trust online reviews and ratings? Especially if the same company showing the rating also makes money by selling movie tickets.Do they have a bias towards rating movies higher than they should be rated?

#**Goal:**

***Our goal is to complete the tasks below based off the 538 article and see if we reach a similar conclusion.We will need to use your pandas and visualization skills to determine if Fandango's ratings in 2015 had a bias towards rating movies better to sell more tickets.***

#**The Data**

This is the data behind the story Be Suspicious Of Online Movie Ratings, Especially Fandangoâ€™s openly available on 538's github: https://github.com/fivethirtyeight/data. There are two csv files, one with Fandango Stars and Displayed Ratings, and the other with aggregate data for movie ratings from other sites, like Metacritic,IMDB, and Rotten Tomatoes.

#**CSV FILES DATA INFO**

# all_sites_scores.csv

all_sites_scores.csv contains every film that has a Rotten Tomatoes rating, a RT User rating, a Metacritic score, a Metacritic User score, and IMDb score, and at least 30 fan reviews on Fandango. The data from Fandango was pulled on Aug. 24, 2015.


# fandango_scape.csv

fandango_scrape.csv contains every film 538 pulled from Fandango.
"""

#IMPORTING LIBRARIES

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive

drive.mount('/content/drive')

file_path = '/content/fandango_scrape.csv'
df = pd.read_csv(file_path)
print(df.head())

df.info()

df.describe()



""" Let's explore the relationship between popularity of a film and its rating. Creating a scatterplot showing the relationship between rating and votes."""

plt.figure(figsize=(10,4),dpi=150)
sns.scatterplot(data=df,x='RATING',y='VOTES')



"""Calculating the correlation between the columns:"""

df.corr(numeric_only=True)



"""Assuming that every row in the FILM title column has the same format:

**Film Title Name (Year)**

Creating a new column that is able to strip the year from the title strings and set this new column as **YEAR**
"""

df['YEAR'] = df['FILM'].apply(lambda x : x.split()[-1].strip('()'))

df['YEAR']



"""How many movies are in the Fandango DataFrame per year?"""

df['YEAR'].value_counts()

plt.figure(figsize=(6,4),dpi=150)
sns.histplot(data=df,x='YEAR')

df['VOTES'].sort_values(ascending=False)
df.head(10)

"""How many movies have zero votes?"""

sum(df['VOTES'] == 0)



"""Create DataFrame of only reviewed films by removing any films that have zero votes."""

reviewed = df[df['VOTES'] > 0]
reviewed

"""###As noted in the article,due to HTML and star rating displays, the true user rating may be slightly different than the rating shown to a user."""

plt.figure(figsize=(9,4),dpi=150)

sns.kdeplot(data=reviewed,x='RATING',shade=True,clip=(0,5),fill=True,label='True Rating')
sns.kdeplot(data=reviewed,x='STARS',shade=True,clip=(0,5),fill=True,label='Stars Displayed')

plt.legend(loc=(1.05,0.4))



"""###Let's now actually quantify this discrepancy.Creating a new column of the different between STARS displayed versus true RATING"""

reviewed['STARS_DIFF'] = reviewed['STARS']-reviewed['RATING']

reviewed['STARS_DIFF'] = reviewed['STARS_DIFF'].round(2)
reviewed

plt.figure(figsize=(12,4),dpi=150)
sns.countplot(data=reviewed,x='STARS_DIFF',palette='viridis')

reviewed[reviewed['STARS_DIFF'] >= 1.0]



"""###Comparison of Fandango Ratings to Other Sites

###Let's now compare the scores from Fandango to other movies sites and see how they compare.
"""

file_path = '/content/all_sites_scores.csv'

all_sites = pd.read_csv(file_path)

all_sites.head()

all_sites.info()

all_sites.describe()



"""###Rotten Tomatoes

Let's first take a look at Rotten Tomatoes. RT has two sets of reviews, their critics reviews (ratings published by official critics) and user reviews.




"""

plt.figure(figsize=(10,5),dpi=150)

sns.scatterplot(data=all_sites,x='RottenTomatoes',y='RottenTomatoes_User')
plt.xlim(0,100)
plt.ylim(0,100)



"""Let's quantify this difference by comparing the critics ratings and the RT User ratings. We will calculate this with RottenTomatoes-RottenTomatoes_User.

Note: Rotten_Diff here is Critics - User Score. So values closer to 0 means aggrement between Critics and Users. Larger positive values means critics rated much higher than users. Larger negative values means users rated much higher than critics.

****

**Creating a new column based off the difference between critics ratings and users ratings for Rotten Tomatoes. Calculating this with RottenTomatoes-RottenTomatoes_User**
"""

all_sites['Rotten_Diff'] = all_sites['RottenTomatoes'] - all_sites['RottenTomatoes_User']

all_sites



"""Let's now compare the overall mean difference.

Since we're dealing with differences that could be negative or positive, first take the absolute value of all the differences, then take the mean. This would report back on average to absolute difference between the critics rating versus the user rating.

****

Calculating the Mean Absolute Difference between RT scores and RT User scores as described above.
"""

absolute_val = all_sites['Rotten_Diff'].abs().mean()
absolute_val

plt.figure(figsize=(12,4),dpi=150)
sns.histplot(data=all_sites,x='Rotten_Diff', kde=True, bins=25)

plt.title('RT Critics Score minus RT User Score')



"""Now creating a distribution showing the absolute value difference between Critics and Users on Rotten Tomatoes."""

plt.figure(figsize=(12,4),dpi=150)
sns.histplot(data=all_sites,x=all_sites['Rotten_Diff'].abs(), kde=True, bins=25)

plt.title('Abs Difference between RT Critics Score and RT User Score')



"""Let's find out which movies are causing the largest differences.

First, show the top 5 movies with the largest negative difference between Users and RT critics. Since we calculated the difference as Critics Rating - Users Rating, then large negative values imply the users rated the movie much higher on average than the critics did.

****

The top 5 movies users rated higher than critics on average:
"""

all_sites.sort_values('Rotten_Diff').head(5)[['FILM','Rotten_Diff']]

"""The top 5 movies critics scores higher than users on average."""

all_sites.sort_values('Rotten_Diff',ascending=False).head(5)[['FILM','Rotten_Diff']]



"""MetaCritic

Now let's take a quick look at the ratings from MetaCritic. Metacritic also shows an average user rating versus their official displayed rating.
"""

plt.figure(figsize=(12,4),dpi=150)
sns.scatterplot(data=all_sites,x='Metacritic',y='Metacritic_User')



"""###**IMDB**

Finally let's explore IMDB now and both Metacritic and IMDB report back vote counts. Let's analyze the most popular movies.
"""

plt.figure(figsize=(12,4),dpi=150)
sns.scatterplot(data=all_sites,x='Metacritic_user_vote_count',y='IMDB_user_vote_count')



"""Notice there are two outliers here.

The movie with the highest vote count on IMDB only has about 500 Metacritic ratings.

What is this movie?

###The highest IMDB user vote count?

****
"""

all_sites.nlargest(1,'IMDB_user_vote_count')

"""###The highest Metacritic User Vote count?"""

all_sites.nlargest(1,'Metacritic_user_vote_count')



"""# **Fandago Scores vs. All Sites**


Now let's explore whether or not Fandango artificially displays higher ratings than warranted to boost ticket sales.

****

Combine the Fandango Table with the All Sites table.
Not every movie in the Fandango table is in the All Sites table,since some Fandango movies have very little or no reviews.We only want to compare movies that are in both DataFrames, so do an inner merge to merge together both DataFrames based on the FILM columns.
"""

#CODE HERE

dff = pd.merge(df,all_sites,how='inner',on='FILM')
dff.info()

dff.head()



"""##Normalize columns to Fandango STARS and RATINGS 0-5

Notice that RT,Metacritic, and IMDB don't use a score between 0-5 stars like Fandango does. In order to do a fair comparison, we need to normalize these values so they all fall between 0-5 stars and the relationship between reviews stays the same.

Creating new normalized columns for all ratings so they match up within the 0-5 star range shown on Fandango.

A simple way to convert ratings:

100/20 = 5
10/2 = 5
"""

dff.describe()

dff.describe().transpose()['max']

import numpy as np

dff['RT_norm']=np.round(dff['RottenTomatoes'] / 20,1)
dff['RT_user_norm']=np.round(dff['RottenTomatoes_User'] / 20,1)

dff['MC_norm']=np.round(dff['Metacritic'] / 20,1)
dff['MC_user_norm']=np.round(dff['Metacritic_User'] / 2,1)

dff['IMDB_norm']=np.round(dff['IMDB'] / 2,1)

dff.head()

"""Now creating a norm_scores DataFrame that only contains the normalizes ratings.

Include both STARS and RATING from the original Fandango table.
"""

dff.columns

norm = dff[['STARS','RATING','RT_norm','RT_user_norm','MC_norm','MC_user_norm','IMDB_norm']]

norm.head()

"""**Comparing Distribution of Scores Across Sites**

****

Creating a plot comparing the distributions of normalized ratings across all sites. To explore the Seaborn KDEplot docs for some simple ways to quickly show this.
"""

def move_legend(ax, new_loc, **kws):

    old_legend = ax.legend_

    handles = old_legend.legendHandles

    labels = [t.get_text() for t in old_legend.get_texts()]

    title = old_legend.get_title().get_text()

    ax.legend(handles, labels, loc=new_loc, title=title, **kws)

fig, ax = plt.subplots(figsize=(10,4),dpi=150)

sns.kdeplot(data=norm,clip=[0,5],fill=True,palette='Set1')

move_legend(ax, "upper left")

"""### Clearly Fandango has an uneven distribution. We can also see that RT critics have the most uniform distribution. Let's directly compare these two.

****

**Creating a KDE plot that compare the distribution of RT critic ratings against the STARS displayed by Fandango.**
"""

#CODE HERE
fig, ax = plt.subplots(figsize=(10,4),dpi=150)

sns.kdeplot(data=norm[['RT_norm','STARS']],clip=[0,5],fill=True,palette='Set1')

move_legend(ax, "upper left")

"""How are the worst movies rated across all platforms?

Creating a clustermap visualization of all normalized scores.
The differences in ratings,highly rated movies should be clustered together versus poorly rated movies.

"""

plt.figure(figsize=(10,4),dpi=150)

sns.histplot(data=norm,bins=50)

plt.figure(figsize=(4,3),dpi=150)
sns.clustermap(data=norm,col_cluster=False)

"""Clearly Fandango is rating movies much higher than other sites,especially considering that it is then displaying a rounded up version of the rating.

Let's examine the top 10 worst movies.

Based off the Rotten Tomatoes Critic Ratings,
What are the top 10 lowest rated movies?
What are the normalized scores across all platforms for these movies?

We may need to add the FILM column back in to your DataFrame of normalized scores to see the results.
"""

worst_films = dff[['STARS','RATING','RT_norm','RT_user_norm','MC_norm','MC_user_norm','IMDB_norm','FILM']]
worst_films.nsmallest(10,'RT_norm')
worst_films

"""Visualize the distribution of ratings across all sites for the top 10 worst movies."""

fig, ax = plt.subplots(figsize=(15,6),dpi=150)
sns.kdeplot(data=worst_films,clip=[0,5],fill=True,palette='Set1')

"""

Final thoughts:

Fandango is showing around 3-4 star ratings for films that are clearly bad! Notice the biggest offender, Taken 3!. Fandango is displaying 4.5 stars on their site for a film with an average rating of 1.86 across the other platforms!"""

worst_films.iloc[25]

0.4+2.3+1.3+2.3+3

9.3/5

















